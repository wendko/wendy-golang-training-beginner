{
    "info": {
        "_postman_id": "7e80b0e6-d561-406c-b37c-3d1764b3ce8b",
        "name": "Golang Traning - Beginner",
        "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
    },
    "item": [
        {
            "name": "Part 1 - Hello World",
            "item": [
                {
                    "name": "GET hello world",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "const jsonData = JSON.parse(responseBody);\r",
                                    "\r",
                                    "pm.test(\"Should return success request (200)\", function () {\r",
                                    "    pm.expect(jsonData.message).to.be.a('string');\r",
                                    "    pm.expect(jsonData.message).to.be.equal('hello world');\r",
                                    "    pm.response.to.have.status(200);\r",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "id": "90550262-0025-44d4-a790-7ef5466cface",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": "http://{{golang-training-url}}/hello-world"
                    },
                    "response": []
                },
                {
                    "name": "GET health",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "const jsonData = JSON.parse(responseBody);\r",
                                    "\r",
                                    "pm.test(\"Should return success request (200)\", function () {\r",
                                    "    pm.expect(jsonData.status).to.be.a('string');\r",
                                    "    pm.expect(jsonData.status).to.be.equal('healthy');\r",
                                    "    pm.response.to.have.status(200);\r",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "id": "b647a605-d245-4caa-8950-1fbccd7245ff",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": "http://{{golang-training-url}}/health"
                    },
                    "response": []
                }
            ],
            "id": "230fb764-f534-44ce-ab07-e10e050f9f5a"
        },
        {
            "name": "Part 2 - CRUD Operation",
            "item": [
                {
                    "name": "POST Create Payment Code",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "const resBody = JSON.parse(responseBody);\r",
                                    "const reqBody = JSON.parse(pm.request.body.raw);\r",
                                    "\r",
                                    "pm.test(\"Should create new payment code and return success request (201)\", function () {\r",
                                    "    pm.expect(resBody.name).to.be.equal(reqBody.name);\r",
                                    "\r",
                                    "    const resExpDate = new Date(resBody.expiration_date);\r",
                                    "    const expectExpDate = new Date();\r",
                                    "    expectExpDate.setFullYear(expectExpDate.getFullYear() + 50); \r",
                                    "    expectExpDate.setSeconds(expectExpDate.getSeconds() - 1); \r",
                                    "\r",
                                    "    let expDateGreaterThan = false;\r",
                                    "    if (resExpDate >= expectExpDate) {\r",
                                    "        expDateGreaterThan = true\r",
                                    "    }\r",
                                    "\r",
                                    "    pm.expect(expDateGreaterThan).to.be.true;\r",
                                    "    pm.response.to.have.status(201);\r",
                                    "});\r",
                                    "\r",
                                    "postman.setEnvironmentVariable(\"part_2_payment_code_id\", resBody.id);\r",
                                    "postman.setEnvironmentVariable(\"part_2_payment_code_name\", resBody.name);\r",
                                    ""
                                ]
                            }
                        }
                    ],
                    "id": "84b10449-ee8b-4e74-95c2-5dfa42cafc3c",
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\r\n    \"payment_code\": \"hello\",\r\n    \"name\": \"lechsa\" \r\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": "http://{{golang-training-url}}/payment-codes"
                    },
                    "response": []
                },
                {
                    "name": "POST Create Payment Code with empty name",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "\r",
                                    "pm.test(\"Should unable to create a payment code and return error status (400)\", function () {\r",
                                    "    pm.response.to.have.status(400);\r",
                                    "});\r",
                                    ""
                                ]
                            }
                        }
                    ],
                    "id": "52498ecf-c1e2-4aa5-9491-b2c603824b63",
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\r\n    \"payment_code\": \"hello\"\r\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": "http://{{golang-training-url}}/payment-codes"
                    },
                    "response": []
                },
                {
                    "name": "GET payment code by ID",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "const resBody = JSON.parse(responseBody);\r",
                                    "const paymentCodeId = parseInt(pm.environment.get(\"part_2_payment_code_id\"));\r",
                                    "const paymentCodeName = pm.environment.get(\"part_2_payment_code_name\");\r",
                                    "\r",
                                    "pm.test(\"Should return a payment code with success status (200)\", function () {\r",
                                    "    pm.expect(resBody.id).to.be.equal(paymentCodeId);\r",
                                    "    pm.expect(resBody.name).to.be.equal(paymentCodeName);\r",
                                    "    pm.response.to.have.status(200);\r",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "id": "9d38d3ae-883e-443d-bfac-970fe49ebb85",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": "http://{{golang-training-url}}/payment-codes/{{part_2_payment_code_id}}"
                    },
                    "response": []
                },
                {
                    "name": "GET payment code by ID with non existent ID",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "const resBody = JSON.parse(responseBody);\r",
                                    "\r",
                                    "pm.test(\"Should return error with not found status (404)\", function () {\r",
                                    "    pm.expect(resBody.id).to.be.undefined;\r",
                                    "    pm.expect(resBody.name).to.be.undefined;\r",
                                    "    pm.response.to.have.status(404);\r",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "id": "4412f99a-f7b0-43f9-b3cb-9079fcfcac92",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": "http://{{golang-training-url}}/payment-codes/abcx"
                    },
                    "response": []
                }
            ],
            "id": "aa8dab9c-525d-4733-8e1d-5d7f2063246c",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "id": "589417c6-ae8f-4bd4-8ff4-14d480e4802c",
                        "type": "text/javascript",
                        "exec": [
                            ""
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "id": "fa282af7-7022-4b2f-a63a-eb4405e46f63",
                        "type": "text/javascript",
                        "exec": [
                            ""
                        ]
                    }
                }
            ]
        },
        {
            "name": "Part 5 - Inquiry and Payment",
            "item": [
                {
                    "name": "POST Inquiry",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "const resBody = JSON.parse(responseBody);\r",
                                    "const reqBody = JSON.parse(pm.request.body.raw);\r",
                                    "\r",
                                    "pm.test(\"Should create new payment code and return success request (200)\", function () {\r",
                                    "    pm.expect(resBody.payment_code).to.be.equal(reqBody.payment_code);\r",
                                    "    pm.expect(resBody.amount).to.be.greaterThan(0);\r",
                                    "    pm.expect(resBody.name.length).to.be.greaterThan(0);\r",
                                    "    pm.expect(resBody.status).to.be.equal('ACTIVE');\r",
                                    "    pm.response.to.have.status(200);\r",
                                    "});\r",
                                    "\r",
                                    "postman.setEnvironmentVariable(\"part_5_transaction_id\", reqBody.transaction_id);\r",
                                    "postman.setEnvironmentVariable(\"part_5_payment_code\", reqBody.payment_code);\r",
                                    "postman.setEnvironmentVariable(\"part_5_amount\", resBody.amount);\r",
                                    "postman.setEnvironmentVariable(\"part_5_name\", resBody.name);\r",
                                    ""
                                ]
                            }
                        }
                    ],
                    "id": "970e9dd0-7866-40b0-abe5-1bb0cc8946e4",
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\r\n    \"transaction_id\": \"123\",\r\n    \"payment_code \": \"abc123\" \r\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": "http://{{golang-training-url}}/inquiry"
                    },
                    "response": []
                },
                {
                    "name": "POST Payment",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "const resBody = JSON.parse(responseBody);\r",
                                    "const reqBody = JSON.parse(pm.request.body.raw);\r",
                                    "\r",
                                    "pm.test(\"Should create new payment code and return success request (200)\", function () {\r",
                                    "    pm.expect(resBody.transaction_id).to.be.equal(reqBody.transaction_id);\r",
                                    "    pm.expect(resBody.name).to.be.equal(reqBody.name);\r",
                                    "    pm.expect(resBody.amount).to.be.equal(reqBody.amount);\r",
                                    "    pm.expect(resBody.status).to.be.equal('SUCCESS');\r",
                                    "    pm.response.to.have.status(200);\r",
                                    "});\r",
                                    ""
                                ]
                            }
                        }
                    ],
                    "id": "62f1276a-e885-4bd8-bf3a-edce611f57e0",
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "raw",
                            "raw": "{\r\n    \"transaction_id\": \"{{part_5_transaction_id}}\",\r\n    \"amount \": {{part_5_amount}}, \r\n    \"name\": \"{{part_5_name}}\", \r\n    \"payment_code\": \"{{part_5_payment_code}}\"\r\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": "http://{{golang-training-url}}/payment"
                    },
                    "response": []
                }
            ],
            "id": "db2ff90e-cd2b-4e72-b396-6c3739dc1326"
        }
    ]
}